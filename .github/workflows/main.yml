name: Infrastructure & Application deployment pipeline


# Trigger the workflow on every push to the "master" branch
on:
  push:
    branches: [ "master" ]

# Global environment variables for AWS configuration and Terraform backend
# Update env.S3BucketName value to an unique value to create a S3 bucket to save terraformstate files
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: node-hostname
  S3BucketName: bwt-assignment-sarith-tfstate
  TF_Key: terraform.tfstate
  Dynamodb_Table: terraform-tfstate

jobs:
  bootstrap-aws-acc:
    name: Infra pre-requisites 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from master
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run AWS CloudFormation template
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: aws-acc-bootstrap
          template: bootstrap.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: BucketName=${{ env.S3BucketName  }},RepoName=${{ env.ECR_REPOSITORY }}

  build-and-push:
    name: Build and Push images to ECR
    runs-on: ubuntu-latest
    needs: bootstrap-aws-acc
    outputs:
      image_tag:  ${{ steps.vars.outputs.sha_short  }}
    steps:
      - name: Checkout code from master
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Generate a short Git commit SHA to use as the image tag and this will be passed to plan, apply stages
      # to use as a input variable to Terraform plan and apply.
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Build the image for both AMD64, ARM64 architectures
      - name: Build, Tag and Push to ECR
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}

  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout code from master
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      # Initialize Terraform with remote backend (S3 and DynamoDB) using backend-config overrides
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.S3BucketName }}" -backend-config="key=${{ env.TF_Key }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.Dynamodb_Table }}"

      # Generate Terraform plan. Using image_tag from 'build-and-push' stage
      - name: View Terraform Plan
        run: terraform plan -var="image_tag=${{ needs.build-and-push.outputs.image_tag }}"

  apply:
    name: Deploying Infra. & App.
    runs-on: ubuntu-latest
    needs: [plan, build-and-push]
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout code from master
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      # Initialize Terraform with remote backend (S3 and DynamoDB) using backend-config overrides
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.S3BucketName }}" -backend-config="key=${{ env.TF_Key }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.Dynamodb_Table }}"

      # Apply Terraform. Using image_tag from 'build-and-push' stage
      - name: Run Terraform Apply
        run: terraform apply --auto-approve -var="image_tag=${{ needs.build-and-push.outputs.image_tag }}"